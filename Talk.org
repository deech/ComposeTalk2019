#+TITLE: A Tase Of ATS
#+AUTHOR: Aditya Siram
#+OPTIONS: H:1 toc:f
#+OPTIONS: ^:nil
#+LATEX_CLASS: beamer
#+LATEX_listingsCLASS_OPTIONS: [presentation]
#+BEAMER_THEME: Madrid

* ATS
- An ML with ADTs, pattern matching, tail calls
- Can be exactly as good the C equivalent
  - Control over memory
  - Performance
- And type safe.
* ATS
- Compiles to /predictable/ C
  - Allows C idioms
  - malloc/free, pointers, stack control
- No compiler optimizations except TCO
  - Recursion is well supported
  - Almost no ...
* ATS
- Linear/refinement types, proof level language
- Not just for memory!
- File handles, network handles
- Any resource!
* ATS
- Extremely difficult
  - Syntax
  - Errors
  - Not mature!
- Mine it for the ideas!
  - Language designers, steal!
  - Users, demand!
* ATS
- Previously spoke about ATS at a high level
- But I want to get into the more interesting features
- Not going to hold back!
  - Wall of code
  - Explain what it's doing 
  - But not every bit of syntax
* ATS
- What are linear types?
- Use once! 
- Pass it to a function, consumed.
* ATS
- Reading from a file
- Linear types to track file descriptors
- C FFI
* ATS
#+BEGIN_SRC
implement main0(argc,argv) =
  let
    val a = fopen("test.txt","r")
    val b = fopen("test.txt","r")
    var f = lam@(s:string):void => println! s
  in (
    fwithline(a,f);
    fclose(a);
    fclose(b)
  )
  end
#+END_SRC
* ATS
#+BEGIN_SRC
implement main0(argc,argv) =
  let
    val a = fopen("test.txt","r")


  in (



  )
  end
#+END_SRC
* ATS
- Tracked by the linear type system
#+BEGIN_SRC
datavtype FileHandle = FileHandle of ()
#+END_SRC
* ATS
#+BEGIN_SRC
implement main0(argc,argv) =
  let
    val a = fopen("test.txt","r")
    val b = fopen("test.txt","r")
    var f = lam@(s:string):void => println! s
  in (
    fwithline(a,f);
    fclose(a);
    fclose(b)
  )
  end
#+END_SRC
* ATS
#+BEGIN_SRC
implement main0(argc,argv) =
  let
    val a = fopen("test.txt","r")


  in (

    fclose(a);

  )
  end
#+END_SRC
* ATS
#+BEGIN_SRC
implement main0(argc,argv) =
  let

    val b = fopen("test.txt","r")

  in (


    fclose(b)
  )
  end
#+END_SRC
* ATS
#+BEGIN_SRC
implement main0(argc,argv) =
  let
    val a = fopen("test.txt","r")
                                  
                                             
  in (
                   
              
             
  )
  end
#+END_SRC
* ATS
#+BEGIN_SRC
fun fopen(path:string,mode:string): FileHandle =
  let
    extern castfn toFileHandle(p:ptr0):<> FileHandle
  in
    toFileHandle($extfcall(ptr0,"fopen",path,mode))
  end
#+END_SRC
* ATS
#+BEGIN_SRC
fun fopen(path:string,mode:string): FileHandle =
  let
                                                    
  in
                ($extfcall(ptr0,"fopen",path,mode))
  end
#+END_SRC
* ATS
#+BEGIN_SRC
fun fopen(path:string,mode:string): FileHandle =
  let
                  toFileHandle(p:ptr0):<> FileHandle
  in
    toFileHandle($extfcall(ptr0,"fopen",path,mode))
  end
#+END_SRC
* ATS
#+BEGIN_SRC
fun fopen(path:string,mode:string): FileHandle =
  let
    extern castfn toFileHandle(p:ptr0):<> FileHandle
  in
    toFileHandle($extfcall(ptr0,"fopen",path,mode))
  end
#+END_SRC
* ATS
#+BEGIN_SRC
implement main0(argc,argv) =
  let
    val a = fopen("test.txt","r")
                                  
                                             
  in (
                   
              
             
  )
  end
#+END_SRC
* ATS
#+BEGIN_SRC
implement main0(argc,argv) =
  let
    val a = fopen("test.txt","r")
    val b = fopen("test.txt","r")

  in (



  )
  end
#+END_SRC
* ATS
#+BEGIN_SRC
implement main0(argc,argv) =
  let
    val a = fopen("test.txt","r")
    val b = fopen("test.txt","r")
    var f = lam@(s:string):void => println! s
  in (        |
              +-------- stack allocated closure!


  )
  end
#+END_SRC
* ATS
#+BEGIN_SRC
implement main0(argc,argv) =
  let
    val a = fopen("test.txt","r")
    val b = fopen("test.txt","r")
    var f = lam@(s:string):void => println! s
  in (
    fwithline(a,f);


  )
  end
#+END_SRC
* ATS
#+BEGIN_SRC
fun fwithline(
    fh: !FileHandle,
    f: &(string) -<clo1> void
    ):void =
  let
                     
                       
                             
                             
                                                       
                                                           
  in

  end
#+END_SRC
* ATS
#+BEGIN_SRC
fun fwithline(
    fh: !FileHandle,
    f: &(string) -<clo1> void
    ):void =
  let
                     
                       
                             
                             
                                                       
    val _ = $extfcall(int,"getline",       ,    ,         )
  in

  end
#+END_SRC
* ATS
#+BEGIN_SRC
fun fwithline(
    fh: !FileHandle,
    f: &(string) -<clo1> void
    ):void =
  let
    var len = i2sz(0)
    val lenP = addr@len
                             
                             
                                                       
    val _ = $extfcall(int,"getline",       ,lenP,         )
  in

  end
#+END_SRC
* ATS
#+BEGIN_SRC
fun fwithline(
    fh: !FileHandle,
    f: &(string) -<clo1> void
    ):void =
  let
    var len = i2sz(0)
    val lenP = addr@len
    var buffer = the_null_ptr
    val bufferP = addr@buffer

    val _ = $extfcall(int,"getline",bufferP,lenP,         )
  in

  end
#+END_SRC
* ATS
#+BEGIN_SRC
fun fwithline(
    fh: !FileHandle,
    f: &(string) -<clo1> void
    ):void =
  let
    var len = i2sz(0)
    val lenP = addr@len
    var buffer = the_null_ptr
    val bufferP = addr@buffer
                  toPtr{l:addr}(f: !FileHandle):<> ptr0
    val _ = $extfcall(int,"getline",bufferP,lenP,toPtr(fh))
  in

  end
#+END_SRC
* ATS
#+BEGIN_SRC
fun fwithline(
    fh: !FileHandle,
    f: &(string) -<clo1> void
    ):void =
  let
    var len = i2sz(0)
    val lenP = addr@len
    var buffer = the_null_ptr
    val bufferP = addr@buffer
    extern castfn toPtr{l:addr}(f: !FileHandle):<> ptr0
    val _ = $extfcall(int,"getline",bufferP,lenP,toPtr(fh))
  in

  end
#+END_SRC
* ATS
#+BEGIN_SRC
fun fwithline(
    fh: !FileHandle,
    f: &(string) -<clo1> void
    ):void =
  let
                     
                       
    var buffer = the_null_ptr
                             
                                                       

  in
    f (                     (buffer))
  end
#+END_SRC
* ATS
#+BEGIN_SRC
fun fwithline(
    fh: !FileHandle,
    f: &(string) -<clo1> void
    ):void =
  let
                     
                       
    var buffer = the_null_ptr
                             
                                                       

  in
    f ($UN.castvwtp0{string}(buffer))
  end
#+END_SRC
* ATS
#+BEGIN_SRC
implement main0(argc,argv) =
  let
    val a = fopen("test.txt","r")
    val b = fopen("test.txt","r")
    var f = lam@(s:string):void => println! s
  in (
    fwithline(a,f);
              
             
  )
  end
#+END_SRC
* ATS
#+BEGIN_SRC
implement main0(argc,argv) =
  let
    val a = fopen("test.txt","r")
    val b = fopen("test.txt","r")
    var f = lam@(s:string):void => println! s
  in (
    fwithline(a,f);
    fclose(a);

  )
  end
#+END_SRC
* ATS
#+BEGIN_SRC
fun fclose(f:FileHandle):void =
  let 
    extern castfn fromFH(f:FileHandle):<> ptr0
  in
    $extfcall(void,"fclose",fromFH(f))
  end
#+END_SRC
* ATS
#+BEGIN_SRC
implement main0(argc,argv) =
  let
    val a = fopen("test.txt","r")
    val b = fopen("test.txt","r")
    var f = lam@(s:string):void => println! s
  in (
    fwithline(a,f);
    fclose(a);
    fclose(b)
  )
  end
#+END_SRC
* ATS

#+BEGIN_SRC
fun fwithline(       
    fh: !FileHandle, 
                      
    ):void =         
#+END_SRC

#+BEGIN_SRC
fun fclose(f: FileHandle):void = 
#+END_SRC
* ATS
- Not just for memory (any resource can be linearly tracked!)
- C FFI is _very_ easy & encouraged
- Strong roots in C
* ATS
- Building an linearly tracked array from scratch
- Datatypes + linear views
- Proofs!
  - Interleaved with term level code
* ATS
  #+BEGIN_SRC
datavtype arr(a:vtflt,addr,int) = 
 | {l:addr}
   arr_nil(a,l,0) of ()
 | {l:addr}{n:nat}
   arr_cons(a,l,n+1) of (a,arr(a,l+sizeof(a),n)) 
  #+END_SRC

* ATS
  #+BEGIN_SRC
datavtype arr(a:vtflt,addr,int) = 
 | 
   arr_nil(     ) of ()
 | 
   arr_cons(       ) of (                      ) 
  #+END_SRC
* ATS
  #+BEGIN_SRC
datavtype arr(a:vtflt,addr,int) = 
 | {l:addr}
   arr_nil(a,l,0) of ()
 | 
   arr_cons(       ) of (                      ) 
  #+END_SRC
* ATS
  #+BEGIN_SRC
datavtype arr(a:vtflt,addr,int) = 
 | {l:addr}
   arr_nil(a,l,0) of ()
 | {l:addr}{n:nat}
   arr_cons(       ) of (                      ) 
  #+END_SRC
* ATS
  #+BEGIN_SRC
datavtype arr(a:vtflt,addr,int) = 
 | {l:addr}
   arr_nil(a,l,0) of ()
 | {l:addr}{n:nat}
   arr_cons(a,l,n+1) of (a,arr(               )) 
  #+END_SRC
* ATS
  #+BEGIN_SRC
datavtype arr(a:vtflt,addr,int) = 
 | {l:addr}
   arr_nil(a,l,0) of ()
 | {l:addr}{n:nat}
   arr_cons(a,l,n+1) of (a,arr(a,             )) 
  #+END_SRC
* ATS
  #+BEGIN_SRC
datavtype arr(a:vtflt,addr,int) = 
 | {l:addr}
   arr_nil(a,l,0) of ()
 | {l:addr}{n:nat}
   arr_cons(a,l,n+1) of (a,arr(a,l+sizeof(a)  )) 
  #+END_SRC
* ATS
  #+BEGIN_SRC
datavtype arr(a:vtflt,addr,int) = 
 | {l:addr}
   arr_nil(a,l,0) of ()
 | {l:addr}{n:nat}
   arr_cons(a,l,n+1) of (a,arr(a,l+sizeof(a),n)) 
  #+END_SRC
* ATS
#+BEGIN_SRC
val a = arr_cons(string0_copy_vt("a"),
         arr_cons(string0_copy_vt("b"),
           arr_cons(string0_copy_vt("c"),
             arr_cons(string0_copy_vt("d"),
               arr_nil()))))

["a","b","c","d"]
#+END_SRC
* ATS
- Split the array!
- *Prove* it!
- Statically split the array
#+BEGIN_SRC
val a = arr_cons(string0_copy_vt("a"),
         arr_cons(string0_copy_vt("b"),
            ...
prval (a1,a2) = array_split(a,1)
 |                  |_______ type level proof!
 |____________ proof value

["a"], ["b","c","d"]
#+END_SRC
- Proofs erased at runtime, zero cost!
* ATS 
#+BEGIN_SRC
prfn arr_split
  {a:vtflt}
  {l:addr}
  {n:int}{i:nat | i <= n}
  (pfarr: arr(a,l,n), i:size(n)): 
    @(arr(a,l,i), arr(a,l+i*sizeof(a),n-i)) =
  split (pfarr) where {
    prfun split
       ...
  }
#+END_SRC
* ATS 
#+BEGIN_SRC
prfn arr_split



  (pfarr: arr(a,l,n), i:size(n)): 
    @(arr(a,l,i), arr(a,l+i*sizeof(a),n-i)) =



  }
#+END_SRC
* ATS 
#+BEGIN_SRC
prfn arr_split


  {n:int}{i:nat | i <= n}
  (pfarr: arr(a,l,n), i:size(n)): 
    @(arr(a,l,i), arr(a,l+i*sizeof(a),n-i)) =



  }
#+END_SRC
* ATS 
#+BEGIN_SRC
prfn arr_split
  {a:vtflt}
  {l:addr}
  {n:int}{i:nat | i <= n}
  (pfarr: arr(a,l,n), i:size(n)): 
    @(arr(a,l,i), arr(a,l+i*sizeof(a),n-i)) =



  }
#+END_SRC
* ATS 
#+BEGIN_SRC
prfn arr_split
  {a:vtflt}
  {l:addr}
  {n:int}{i:nat | i <= n}
  (pfarr: arr(a,l,n), i:size(n)): 
    @(arr(a,l,i), arr(a,l+i*sizeof(a),n-i)) =
  split (pfarr) where {
    prfun split
       ...
  }
#+END_SRC
* ATS
#+BEGIN_SRC
prfun split
  ...
  sif i > 0 then 
    let 
      prval (pfx,pfxs) = uncons(pfarr)
      prval (pfleft,pfright) = split{..}{n.-1,i-1}(pfxs)
    in
      (arr_cons (pfx, pfleft), pfright)
    end
  else 
    let
      prval EQINT () = eqint_make{i,0}()
    in
     (arr_nil{a}{l}(), pfarr)
    end
#+END_SRC
* ATS
#+BEGIN_SRC
prfun split
  ...
  sif i > 0 then 
    let 
      prval (pfx,pfxs) = uncons(pfarr)
                             
                
                   
                                  
                                         
 
                                       
       

       
#+END_SRC
* ATS
#+BEGIN_SRC
prfun split
  ...
  sif i > 0 then 
    let 
      prval (pfx,pfxs) = uncons(pfarr)
               ____________| 
               |
extern praxi uncons
  {a:vtflt}{l:addr}{n:nat | n > 0}
  (arr(a,l,n)):(a,arr(a,l+sizeof(a),n-1))
 
                                       
       

       
#+END_SRC
* ATS
#+BEGIN_SRC
prfun split
  ...
  sif i > 0 then 
    let 
      prval (pfx,pfxs) = uncons(pfarr)
               ____________| 
               |
extern praxi uncons

  (arr(a,l,n)):(a,arr(a,l+sizeof(a),n-1))
 
                                       
       

       
#+END_SRC
* ATS
#+BEGIN_SRC
prfun split
  ...
  sif i > 0 then 
    let 
      prval (pfx,pfxs) = uncons(pfarr)
      prval (pfleft,pfright) = split{..}{n-1,i-1}(pfxs)
    in                                |_____
      (arr_cons (pfx, pfleft), pfright)     |
    end                                     |
  else          l+sizeof(a)_________________|




    end
#+END_SRC
* ATS
#+BEGIN_SRC
prfun split
  ...
  sif i > 0 then 
        
                                      
                                                                
      
                                       
       
  else 
    let
      prval EQINT () = eqint_make{i,0}()
    in
     (arr_nil{a}{l}(), pfarr)
    end
#+END_SRC
* ATS
#+BEGIN_SRC
prfun split
  ...
  sif i > 0 then 
        
              ___________________________________                        
              |                                  |                
  dataprop EQINT(int,int) = {x:int} EQINT(x,x)   |
  extern prfun eqint_make{x,y:int | x == y}(): EQINT(x, y)
                   |_______ 
  else                     |
    let                    |
      prval EQINT () = eqint_make{i,0}()
    in
     (arr_nil{a}{l}(), pfarr)
    end
#+END_SRC
