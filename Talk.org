#+TITLE: A Tase Of ATS
#+AUTHOR: Aditya Siram
#+OPTIONS: H:1 toc:f
#+OPTIONS: ^:nil
#+LATEX_CLASS: beamer
#+LATEX_listingsCLASS_OPTIONS: [presentation]
#+BEAMER_THEME: Madrid
#+EPRESENT_FRAME_LEVEL: 1

* ATS
- An ML with ADTs and pattern matching
  - Recursion is well supported
- Compiles to /predictable/ C
  - malloc/free, pointers, stack control
- No compiler optimizations except TCO
  - Almost no ...
  - C perf. because C idioms
- Linear/refinement types, proof level language
* ATS
- Hello world 
#+BEGIN_SRC ats
    #include "share/HATS/temptory_staload_bucs320.hats"
    fun mytest():stream_vt(int) =
      (* *)

    implement main0(argc,argv) = 
      let
        val n = mytest()
        val x = stream_vt_listize n
        val () = print x
      in
        free x
      end
#+END_SRC
* Notes
- tuple allocation
- array appending
- array appending with overflowcheck
- array filtering
- array filtering in place
- streams from scratch (lazy/ldelay)
- stream processing (templates/lexical scope)
- interaction between GC'ed and non-gc'ed components
